# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    command: sh -c "npx prisma migrate deploy && npm run start"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://postgres:bureck@db:5432/time-capsule
    env_file: .env
    ports:
      - 4001:4001
    depends_on:
      redis:
        condition: service_started
    networks:
      - node-network

  worker:
    build:
      context: .
    command: ["npm", "run", "worker"]
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://postgres:bureck@db:5432/time-capsule
    env_file: .env
    depends_on:
      redis:
        condition: service_started
    networks:
      - node-network

  db:
    image: postgres:17.5-alpine3.22
    restart: always
    user: postgres
    environment:
      - POSTGRES_DB=time-capsule 
      - POSTGRES_PASSWORD
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - db-data:/var/lib/postgresql/data
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - node-network

  redis:
    image: redis:7.4-alpine
    restart: always
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - node-network

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/logs/:/var/log/nginx 
    ports:
      - "8001:8001"
    depends_on:
      - server
    networks:
      - node-network

volumes:
  db-data:

networks:
  node-network:
    driver: bridge


